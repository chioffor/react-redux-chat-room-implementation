{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst colorChoices = ['text-primary', 'text-success', 'text-secondary', 'text-danger', 'text-warning', 'text-info', 'text-dark'];\n\nlet getRandomInt = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nlet randomInt = getRandomInt(0, colorChoices.length + 1);\nlet randomColor = colorChoices[randomInt];\nlet textClass = randomColor + ' fw-bold me-2';\nconst initialState = {\n  rooms: [{\n    id: \"1\",\n    name: \"IT\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to IT Room\",\n      username: 'admin',\n      classString: randomColor + ' fw-bold me-2'\n    }]\n  }, {\n    id: \"2\",\n    name: \"Politics\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to Politics Room\",\n      username: 'admin',\n      classString: randomColor + ' fw-bold me-2'\n    }]\n  }, {\n    id: \"3\",\n    name: \"Football\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to Football Room\",\n      username: 'admin',\n      classString: randomColor + ' fw-bold me-2'\n    }]\n  }],\n  status: 'idle',\n  error: null\n};\nconst roomsSlice = createSlice({\n  name: 'rooms',\n  initialState,\n  reducers: {\n    newChatMessage(state, action) {\n      const {\n        roomId,\n        text,\n        messageId,\n        username\n      } = action.payload;\n      const currentRoom = state.rooms.find(room => room.id === roomId);\n\n      if (currentRoom) {\n        currentRoom.messages.push({\n          id: messageId,\n          text: text,\n          username: username,\n          classString: randomColor + ' fw-bold me-2'\n        });\n      }\n    }\n\n  }\n});\nexport const {\n  newChatMessage\n} = roomsSlice.actions;\nexport default roomsSlice.reducer;","map":{"version":3,"sources":["/home/chiks/socketProject/chat-room/src/features/rooms/roomsSlice.js"],"names":["createSlice","nanoid","colorChoices","getRandomInt","min","max","Math","floor","random","randomInt","length","randomColor","textClass","initialState","rooms","id","name","messages","text","username","classString","status","error","roomsSlice","reducers","newChatMessage","state","action","roomId","messageId","payload","currentRoom","find","room","push","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA,MAAMC,YAAY,GAAG,CACjB,cADiB,EAEjB,cAFiB,EAGjB,gBAHiB,EAIjB,aAJiB,EAKjB,cALiB,EAMjB,WANiB,EAOjB,WAPiB,CAArB;;AAUA,IAAIC,YAAY,GAAG,CAACC,GAAD,EAAMC,GAAN,KACfC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CADJ;;AAIA,IAAIK,SAAS,GAAGN,YAAY,CAAC,CAAD,EAAID,YAAY,CAACQ,MAAb,GAAsB,CAA1B,CAA5B;AACA,IAAIC,WAAW,GAAGT,YAAY,CAACO,SAAD,CAA9B;AAEA,IAAIG,SAAS,GAAGD,WAAW,GAAG,eAA9B;AAEA,MAAME,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACH;AAAEC,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,IAAjB;AAAuBC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEd,MAAM,EAAZ;AAAgBiB,MAAAA,IAAI,EAAE,oBAAtB;AAA4CC,MAAAA,QAAQ,EAAE,OAAtD;AAA+DC,MAAAA,WAAW,EAAET,WAAW,GAAG;AAA1F,KAAD;AAAjC,GADG,EAEH;AAAEI,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,UAAjB;AAA6BC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEd,MAAM,EAAZ;AAAgBiB,MAAAA,IAAI,EAAE,0BAAtB;AAAkDC,MAAAA,QAAQ,EAAE,OAA5D;AAAqEC,MAAAA,WAAW,EAAET,WAAW,GAAG;AAAhG,KAAD;AAAvC,GAFG,EAGH;AAAEI,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,UAAjB;AAA6BC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEd,MAAM,EAAZ;AAAgBiB,MAAAA,IAAI,EAAE,0BAAtB;AAAkDC,MAAAA,QAAQ,EAAE,OAA5D;AAAqEC,MAAAA,WAAW,EAAET,WAAW,GAAG;AAAhG,KAAD;AAAvC,GAHG,CADU;AAMjBU,EAAAA,MAAM,EAAE,MANS;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;AAUA,MAAMC,UAAU,GAAGvB,WAAW,CAAC;AAC3BgB,EAAAA,IAAI,EAAE,OADqB;AAE3BH,EAAAA,YAF2B;AAG3BW,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEC,QAAAA,MAAF;AAAUV,QAAAA,IAAV;AAAgBW,QAAAA,SAAhB;AAA2BV,QAAAA;AAA3B,UAAwCQ,MAAM,CAACG,OAArD;AACA,YAAMC,WAAW,GAAGL,KAAK,CAACZ,KAAN,CAAYkB,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAAClB,EAAL,KAAYa,MAArC,CAApB;;AACA,UAAIG,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACd,QAAZ,CAAqBiB,IAArB,CAA0B;AACtBnB,UAAAA,EAAE,EAAEc,SADkB;AAEtBX,UAAAA,IAAI,EAAEA,IAFgB;AAGtBC,UAAAA,QAAQ,EAAEA,QAHY;AAItBC,UAAAA,WAAW,EAAET,WAAW,GAAG;AAJL,SAA1B;AAMH;AACJ;;AAZK;AAHiB,CAAD,CAA9B;AAmBA,OAAO,MAAM;AAAEc,EAAAA;AAAF,IAAqBF,UAAU,CAACY,OAAtC;AAEP,eAAeZ,UAAU,CAACa,OAA1B","sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\n\nconst colorChoices = [\n    'text-primary',\n    'text-success',\n    'text-secondary',\n    'text-danger',\n    'text-warning',\n    'text-info',\n    'text-dark',\n]\n\nlet getRandomInt = (min, max) => (\n    Math.floor(Math.random() * (max - min) + min)\n)\n\nlet randomInt = getRandomInt(0, colorChoices.length + 1)\nlet randomColor = colorChoices[randomInt]\n\nlet textClass = randomColor + ' fw-bold me-2' \n\nconst initialState = {\n    rooms: [\n        { id: \"1\", name: \"IT\", messages: [{ id: nanoid(), text: \"Welcome to IT Room\", username: 'admin', classString: randomColor + ' fw-bold me-2' }]},\n        { id: \"2\", name: \"Politics\", messages: [{ id: nanoid(), text: \"Welcome to Politics Room\", username: 'admin', classString: randomColor + ' fw-bold me-2' }]},\n        { id: \"3\", name: \"Football\", messages: [{ id: nanoid(), text: \"Welcome to Football Room\", username: 'admin', classString: randomColor + ' fw-bold me-2' }]}\n    ],\n    status: 'idle',\n    error: null\n}\n\nconst roomsSlice = createSlice({\n    name: 'rooms',\n    initialState,\n    reducers: {\n        newChatMessage(state, action) {\n            const { roomId, text, messageId, username } = action.payload\n            const currentRoom = state.rooms.find(room => room.id === roomId)\n            if (currentRoom) {\n                currentRoom.messages.push({\n                    id: messageId,\n                    text: text,\n                    username: username,\n                    classString: randomColor + ' fw-bold me-2',\n                })\n            }\n        }\n    }\n})\n\nexport const { newChatMessage } = roomsSlice.actions\n\nexport default roomsSlice.reducer"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport moment from 'moment';\nconst initialState = {\n  rooms: [{\n    id: \"1\",\n    name: \"IT\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to IT Chat Room\",\n      username: {\n        name: 'admin',\n        color: ''\n      }\n    }]\n  }, {\n    id: \"2\",\n    name: \"Politics\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to Politics Chat Room\",\n      username: {\n        name: 'admin',\n        color: ''\n      }\n    }]\n  }, {\n    id: \"3\",\n    name: \"Football\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to Football Chat Room\",\n      username: {\n        name: 'admin',\n        color: ''\n      }\n    }]\n  }],\n  status: 'idle',\n  error: null\n};\nconst roomsSlice = createSlice({\n  name: 'rooms',\n  initialState,\n  reducers: {\n    newRoomCreated(state, action) {\n      const {\n        roomId,\n        roomName\n      } = action.payload;\n      state.rooms.push({\n        id: roomId,\n        name: roomName,\n        messages: [{\n          id: nanoid(),\n          text: `Welcome to ${roomName} Chat Room`\n        }]\n      });\n    },\n\n    newChatMessage(state, action) {\n      const {\n        roomId,\n        text,\n        messageId,\n        username,\n        usernameColor\n      } = action.payload;\n      const currentRoom = state.rooms.find(room => room.id === roomId);\n\n      if (currentRoom) {\n        currentRoom.messages.push({\n          id: messageId,\n          text: text,\n          timestamp: moment().format('h:mm:ss'),\n          username: {\n            name: username,\n            color: usernameColor\n          }\n        });\n      }\n    },\n\n    userJoinedRoom(state, action) {\n      const {\n        roomId,\n        username,\n        messageId\n      } = action.payload;\n      const currentRoom = state.rooms.find(room => room.id === roomId);\n\n      if (currentRoom) {\n        currentRoom.messages.push({\n          id: messageId,\n          text: `${username} has joined the room`,\n          info: {\n            username: username\n          }\n        });\n      }\n    }\n\n  }\n});\nexport const {\n  newChatMessage,\n  newRoomCreated,\n  userJoinedRoom\n} = roomsSlice.actions;\nexport default roomsSlice.reducer;","map":{"version":3,"sources":["/home/chiks/socketProject/chat-room/src/features/rooms/roomsSlice.js"],"names":["createSlice","nanoid","moment","initialState","rooms","id","name","messages","text","username","color","status","error","roomsSlice","reducers","newRoomCreated","state","action","roomId","roomName","payload","push","newChatMessage","messageId","usernameColor","currentRoom","find","room","timestamp","format","userJoinedRoom","info","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\nimport moment from 'moment'\n\nconst initialState = {\n    rooms: [\n        { \n            id: \"1\",\n            name: \"IT\", \n            messages: [\n                { \n                    id: nanoid(), \n                    text: \"Welcome to IT Chat Room\", \n                    username: { name: 'admin', color: '' },\n                },\n            ]\n        },\n\n        { \n            id: \"2\", \n            name: \"Politics\", \n            messages: [\n                { \n                    id: nanoid(), \n                    text: \"Welcome to Politics Chat Room\", \n                    username: { name: 'admin', color: ''}\n                },\n            ]\n        },\n\n        { \n            id: \"3\",\n            name: \"Football\", \n            messages: [\n                { \n                    id: nanoid(), \n                    text: \"Welcome to Football Chat Room\",                    \n                    username: { name: 'admin', color: '' }\n                },\n            ]\n        }\n    ],\n    status: 'idle',\n    error: null\n}\n\nconst roomsSlice = createSlice({\n    name: 'rooms',\n    initialState,\n    reducers: {\n        newRoomCreated(state, action) {\n            const { roomId, roomName } = action.payload\n            state.rooms.push({\n                id: roomId,\n                name: roomName,\n                messages: [\n                    {\n                        id: nanoid(),\n                        text: `Welcome to ${roomName} Chat Room`,                        \n                    }\n                ]\n            })\n        },\n\n        newChatMessage(state, action) {\n            const { roomId, text, messageId, username, usernameColor } = action.payload\n            const currentRoom = state.rooms.find(room => room.id === roomId)\n            if (currentRoom) {\n                currentRoom.messages.push({\n                    id: messageId,\n                    text: text,\n                    timestamp: moment().format('h:mm:ss'),\n                    username: {\n                        name: username,\n                        color: usernameColor,\n                    }                    \n                })\n            }\n        },\n\n        userJoinedRoom(state, action) {\n            const { roomId, username, messageId } = action.payload\n            const currentRoom = state.rooms.find(room => room.id === roomId)\n            if (currentRoom) {\n                currentRoom.messages.push({\n                    id: messageId,\n                    text: `${username} has joined the room`,\n                    info: {\n                        username: username\n                    }\n                                 \n                })\n            }\n        }\n    }\n})\n\nexport const { newChatMessage, newRoomCreated, userJoinedRoom } = roomsSlice.actions\n\nexport default roomsSlice.reducer"]},"metadata":{},"sourceType":"module"}
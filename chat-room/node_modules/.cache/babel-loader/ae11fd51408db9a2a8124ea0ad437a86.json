{"ast":null,"code":"var _jsxFileName = \"/home/chiks/socketProject/chat-room/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport { io } from 'socket.io-client';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { RoomHeader } from './features/rooms/RoomHeader';\nimport { RoomsList } from './features/rooms/RoomsList';\nimport { RoomFooter } from './features/rooms/RoomFooter';\nimport { ChatHeader } from './features/chats/ChatHeader';\nimport { ChatMessages } from './features/chats/ChatMessages';\nimport { ChatInput } from './features/chats/ChatInput';\nimport { newChatMessage } from './features/rooms/roomsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst endpoint = 'http://localhost:3001';\n\nconst App = () => {\n  _s();\n\n  const [clicked, setClicked] = useState(false);\n  const [roomId, setRoomId] = useState('');\n  const rooms = useSelector(state => state.rooms.rooms);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    socket = io(endpoint);\n    socket.on('chat message', function (data) {\n      dispatch(newChatMessage({\n        roomId: data.roomId,\n        text: data.text,\n        messageId: nanoid()\n      }));\n    });\n  }, [dispatch]);\n\n  const handleClick = (e, roomId) => {\n    setClicked(true);\n    setRoomId(roomId);\n  };\n\n  const emitMessage = (text, roomId) => {\n    if (text) {\n      socket.emit('chat message', {\n        text,\n        roomId\n      });\n    }\n  };\n\n  const renderedRooms = rooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-group-item\",\n    onClick: e => handleClick(e, room.id),\n    children: room.name\n  }, room.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"position-absolute top-50 start-50 translate-middle\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-white bg-dark mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: \"Enter a username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body input-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this) // <div className=\"card position-absolute top-50 start-50 translate-middl\">\n  //   <div className=\"card-body\">\n  //     <form>\n  //       <div className=\"input-group\">\n  //         <input type=\"text\" />\n  //         <input className=\"btn btn-primary\" value=\"send\" />\n  //       </div>\n  //     </form>      \n  //   </div>\n  // </div>\n  // <div className=\"container w-50 mt-5\">\n  //   { clicked ?\n  //     <ChatDisplay \n  //       roomId={roomId}\n  //       emitMessage={emitMessage}\n  //       handleClick={handleClick}\n  //     /> :\n  //     <RoomDisplay renderedRooms={renderedRooms} />\n  //   }\n  // </div>\n  ;\n};\n\n_s(App, \"LeUCqVHNOoRDbmJz6LHWv+OcHnw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = App;\n\nfunction ChatDisplay({\n  roomId,\n  emitMessage,\n  handleClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card text-center\",\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      roomId: roomId,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n      roomId: roomId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      roomId: roomId,\n      emitMessage: emitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = ChatDisplay;\n;\n\nfunction RoomDisplay({\n  renderedRooms\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card text-center\",\n    children: [/*#__PURE__*/_jsxDEV(RoomHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoomsList, {\n      renderedRooms: renderedRooms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoomFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = RoomDisplay;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatDisplay\");\n$RefreshReg$(_c3, \"RoomDisplay\");","map":{"version":3,"sources":["/home/chiks/socketProject/chat-room/src/App.js"],"names":["React","useEffect","useState","useSelector","useDispatch","io","nanoid","RoomHeader","RoomsList","RoomFooter","ChatHeader","ChatMessages","ChatInput","newChatMessage","socket","endpoint","App","clicked","setClicked","roomId","setRoomId","rooms","state","dispatch","on","data","text","messageId","handleClick","e","emitMessage","emit","renderedRooms","map","room","id","name","ChatDisplay","RoomDisplay"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './App.css';\r\n\r\nimport { io } from 'socket.io-client'\r\n\r\nimport { nanoid } from '@reduxjs/toolkit';\r\n\r\nimport { RoomHeader } from './features/rooms/RoomHeader'\r\nimport { RoomsList } from './features/rooms/RoomsList'\r\nimport { RoomFooter } from './features/rooms/RoomFooter'\r\n\r\nimport { ChatHeader } from './features/chats/ChatHeader'\r\nimport { ChatMessages } from './features/chats/ChatMessages'\r\nimport { ChatInput } from './features/chats/ChatInput'\r\n\r\nimport { newChatMessage } from './features/rooms/roomsSlice'\r\n\r\nlet socket;\r\nconst endpoint = 'http://localhost:3001'\r\n\r\nconst App = () => {\r\n  \r\n  const [clicked, setClicked] = useState(false);\r\n  const [roomId, setRoomId] = useState('');\r\n\r\n  const rooms = useSelector(state => state.rooms.rooms);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    socket = io(endpoint);\r\n    socket.on('chat message', function(data) {\r\n      dispatch(newChatMessage({\r\n        roomId: data.roomId,\r\n        text: data.text,\r\n        messageId: nanoid()\r\n      }));\r\n    });\r\n   \r\n  }, [dispatch]);\r\n\r\n  const handleClick = (e, roomId) => {\r\n    setClicked(true)\r\n    setRoomId(roomId)\r\n  }\r\n\r\n  const emitMessage = (text, roomId) => {\r\n    if (text) {\r\n      socket.emit('chat message', { text, roomId })\r\n    }\r\n  }\r\n\r\n  const renderedRooms = rooms.map(room => (\r\n    <div \r\n      className=\"list-group-item\" \r\n      key={room.id}\r\n      onClick={e => handleClick(e, room.id)}\r\n    >\r\n      {room.name}\r\n    </div>\r\n  ));\r\n  \r\n  return (\r\n    <div className=\"position-absolute top-50 start-50 translate-middle\">\r\n      <div className=\"card text-white bg-dark mb-3\">\r\n        <div className=\"card-header\">Enter a username</div>\r\n        <div className=\"card-body input-group\">\r\n          <input type=\"text\" />\r\n          {/* <h5 class=\"card-title\">Primary card title</h5>\r\n          <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    // <div className=\"card position-absolute top-50 start-50 translate-middl\">\r\n    //   <div className=\"card-body\">\r\n    //     <form>\r\n    //       <div className=\"input-group\">\r\n    //         <input type=\"text\" />\r\n    //         <input className=\"btn btn-primary\" value=\"send\" />\r\n    //       </div>\r\n    //     </form>      \r\n    //   </div>\r\n    // </div>\r\n\r\n\r\n    // <div className=\"container w-50 mt-5\">\r\n    //   { clicked ?\r\n    //     <ChatDisplay \r\n    //       roomId={roomId}\r\n    //       emitMessage={emitMessage}\r\n    //       handleClick={handleClick}\r\n    //     /> :\r\n    //     <RoomDisplay renderedRooms={renderedRooms} />\r\n    //   }\r\n    // </div>\r\n  )\r\n}\r\n\r\nfunction ChatDisplay({ roomId, emitMessage, handleClick }) {\r\n\r\n  return (\r\n    <div className=\"card text-center\">\r\n      <ChatHeader roomId={roomId} handleClick={handleClick} />\r\n      <ChatMessages roomId={roomId} />\r\n      <ChatInput \r\n        roomId={roomId}\r\n        emitMessage={emitMessage}\r\n      />\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\n\r\nfunction RoomDisplay({ renderedRooms }) {\r\n  return (\r\n    <div className=\"card text-center\">\r\n      <RoomHeader />\r\n      <RoomsList renderedRooms={renderedRooms}/>\r\n      <RoomFooter />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  rooms: [{\n    id: \"1\",\n    name: \"IT\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to IT Room\",\n      username: {\n        name: 'admin',\n        color: ''\n      }\n    }]\n  }, {\n    id: \"2\",\n    name: \"Politics\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to Politics Room\",\n      username: {\n        name: 'admin',\n        color: ''\n      }\n    }]\n  }, {\n    id: \"3\",\n    name: \"Football\",\n    messages: [{\n      id: nanoid(),\n      text: \"Welcome to Football Room\",\n      username: {\n        name: 'admin',\n        color: ''\n      }\n    }]\n  }],\n  status: 'idle',\n  error: null\n};\nconst roomsSlice = createSlice({\n  name: 'rooms',\n  initialState,\n  reducers: {\n    newRoomCreated(state, action) {\n      const {\n        id,\n        roomName\n      } = action.payload;\n      state.rooms.push({\n        id: id,\n        name: roomName,\n        messages: []\n      });\n    },\n\n    newChatMessage(state, action) {\n      const {\n        roomId,\n        text,\n        messageId,\n        username,\n        usernameColor\n      } = action.payload;\n      const currentRoom = state.rooms.find(room => room.id === roomId);\n\n      if (currentRoom) {\n        currentRoom.messages.push({\n          id: messageId,\n          text: text,\n          username: {\n            name: username,\n            color: usernameColor\n          }\n        });\n      }\n    }\n\n  }\n});\nexport const {\n  newChatMessage,\n  newRoomCreated\n} = roomsSlice.actions;\nexport default roomsSlice.reducer;","map":{"version":3,"sources":["/home/chiks/socketProject/chat-room/src/features/rooms/roomsSlice.js"],"names":["createSlice","nanoid","initialState","rooms","id","name","messages","text","username","color","status","error","roomsSlice","reducers","newRoomCreated","state","action","roomName","payload","push","newChatMessage","roomId","messageId","usernameColor","currentRoom","find","room","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACH;AAAEC,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,IAAjB;AAAuBC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEH,MAAM,EAAZ;AAAgBM,MAAAA,IAAI,EAAE,oBAAtB;AAA4CC,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBI,QAAAA,KAAK,EAAE;AAAxB;AAAtD,KAAD;AAAjC,GADG,EAEH;AAAEL,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,UAAjB;AAA6BC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEH,MAAM,EAAZ;AAAgBM,MAAAA,IAAI,EAAE,0BAAtB;AAAkDC,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBI,QAAAA,KAAK,EAAE;AAAxB;AAA5D,KAAD;AAAvC,GAFG,EAGH;AAAEL,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,UAAjB;AAA6BC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEH,MAAM,EAAZ;AAAgBM,MAAAA,IAAI,EAAE,0BAAtB;AAAkDC,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBI,QAAAA,KAAK,EAAE;AAAxB;AAA5D,KAAD;AAAvC,GAHG,CADU;AAMjBC,EAAAA,MAAM,EAAE,MANS;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;AAUA,MAAMC,UAAU,GAAGZ,WAAW,CAAC;AAC3BK,EAAAA,IAAI,EAAE,OADqB;AAE3BH,EAAAA,YAF2B;AAG3BW,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEZ,QAAAA,EAAF;AAAMa,QAAAA;AAAN,UAAmBD,MAAM,CAACE,OAAhC;AACAH,MAAAA,KAAK,CAACZ,KAAN,CAAYgB,IAAZ,CAAiB;AACbf,QAAAA,EAAE,EAAEA,EADS;AAEbC,QAAAA,IAAI,EAAEY,QAFO;AAGbX,QAAAA,QAAQ,EAAE;AAHG,OAAjB;AAKH,KARK;;AAUNc,IAAAA,cAAc,CAACL,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEK,QAAAA,MAAF;AAAUd,QAAAA,IAAV;AAAgBe,QAAAA,SAAhB;AAA2Bd,QAAAA,QAA3B;AAAqCe,QAAAA;AAArC,UAAuDP,MAAM,CAACE,OAApE;AACA,YAAMM,WAAW,GAAGT,KAAK,CAACZ,KAAN,CAAYsB,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACtB,EAAL,KAAYiB,MAArC,CAApB;;AACA,UAAIG,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAAClB,QAAZ,CAAqBa,IAArB,CAA0B;AACtBf,UAAAA,EAAE,EAAEkB,SADkB;AAEtBf,UAAAA,IAAI,EAAEA,IAFgB;AAGtBC,UAAAA,QAAQ,EAAE;AACNH,YAAAA,IAAI,EAAEG,QADA;AAENC,YAAAA,KAAK,EAAEc;AAFD;AAHY,SAA1B;AAQH;AACJ;;AAvBK;AAHiB,CAAD,CAA9B;AA8BA,OAAO,MAAM;AAAEH,EAAAA,cAAF;AAAkBN,EAAAA;AAAlB,IAAqCF,UAAU,CAACe,OAAtD;AAEP,eAAef,UAAU,CAACgB,OAA1B","sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\n\n\nconst initialState = {\n    rooms: [\n        { id: \"1\", name: \"IT\", messages: [{ id: nanoid(), text: \"Welcome to IT Room\", username: { name: 'admin', color: '' }}]},\n        { id: \"2\", name: \"Politics\", messages: [{ id: nanoid(), text: \"Welcome to Politics Room\", username: { name: 'admin', color: '' }}]},\n        { id: \"3\", name: \"Football\", messages: [{ id: nanoid(), text: \"Welcome to Football Room\", username: { name: 'admin', color: '' }}]}\n    ],\n    status: 'idle',\n    error: null\n}\n\nconst roomsSlice = createSlice({\n    name: 'rooms',\n    initialState,\n    reducers: {\n        newRoomCreated(state, action) {\n            const { id, roomName } = action.payload\n            state.rooms.push({\n                id: id,\n                name: roomName,\n                messages: []\n            })\n        },\n\n        newChatMessage(state, action) {\n            const { roomId, text, messageId, username, usernameColor } = action.payload\n            const currentRoom = state.rooms.find(room => room.id === roomId)\n            if (currentRoom) {\n                currentRoom.messages.push({\n                    id: messageId,\n                    text: text,\n                    username: {\n                        name: username,\n                        color: usernameColor,\n                    }                    \n                })\n            }\n        },\n    }\n})\n\nexport const { newChatMessage, newRoomCreated } = roomsSlice.actions\n\nexport default roomsSlice.reducer"]},"metadata":{},"sourceType":"module"}
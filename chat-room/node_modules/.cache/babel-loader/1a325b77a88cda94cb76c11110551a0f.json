{"ast":null,"code":"import { createSlice, createAsyncThunk, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  rooms: [{\n    id: \"1\",\n    name: \"IT\",\n    messages: [{\n      id: nanoid(),\n      text: \"hey sup\"\n    }]\n  }, {\n    id: \"2\",\n    name: \"Politics\",\n    messages: [{\n      id: nanoid(),\n      text: \"hello\"\n    }]\n  }, {\n    id: \"3\",\n    name: \"Football\",\n    messages: [{\n      id: nanoid(),\n      text: \"hii\"\n    }]\n  }],\n  status: 'idle',\n  error: null\n};\nconst roomsSlice = createSlice({\n  name: 'rooms',\n  initialState,\n  reducers: {\n    newChatMessage: (state, action) => {\n      const {\n        roomId,\n        text\n      } = action.payload;\n      const currentRoom = state.rooms.find(room => room.id === roomId);\n\n      if (currentRoom) {\n        currentRoom.messages.push({\n          id: nanoid(),\n          text: text\n        });\n      }\n    }\n  }\n});\nexport const newChatMessage = roomsSlice.actions;\nexport default roomsSlice.reducer;","map":{"version":3,"sources":["/home/chiks/socketProject/chat-room/src/features/rooms/roomsSlice.js"],"names":["createSlice","createAsyncThunk","nanoid","initialState","rooms","id","name","messages","text","status","error","roomsSlice","reducers","newChatMessage","state","action","roomId","payload","currentRoom","find","room","push","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,MAAxC,QAAsD,kBAAtD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACH;AAAEC,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,IAAjB;AAAuBC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEH,MAAM,EAAZ;AAAgBM,MAAAA,IAAI,EAAE;AAAtB,KAAD;AAAjC,GADG,EAEH;AAAEH,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,UAAjB;AAA6BC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEH,MAAM,EAAZ;AAAgBM,MAAAA,IAAI,EAAE;AAAtB,KAAD;AAAvC,GAFG,EAGH;AAAEH,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,UAAjB;AAA6BC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAEH,MAAM,EAAZ;AAAgBM,MAAAA,IAAI,EAAE;AAAtB,KAAD;AAAvC,GAHG,CADU;AAMjBC,EAAAA,MAAM,EAAE,MANS;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;AAUA,MAAMC,UAAU,GAAGX,WAAW,CAAC;AAC3BM,EAAAA,IAAI,EAAE,OADqB;AAE3BH,EAAAA,YAF2B;AAG3BS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,YAAM;AAAEC,QAAAA,MAAF;AAAUR,QAAAA;AAAV,UAAmBO,MAAM,CAACE,OAAhC;AACA,YAAMC,WAAW,GAAGJ,KAAK,CAACV,KAAN,CAAYe,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACf,EAAL,KAAYW,MAArC,CAApB;;AACA,UAAIE,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACX,QAAZ,CAAqBc,IAArB,CAA0B;AACtBhB,UAAAA,EAAE,EAAEH,MAAM,EADY;AAEtBM,UAAAA,IAAI,EAAEA;AAFgB,SAA1B;AAIH;AACJ;AAVK;AAHiB,CAAD,CAA9B;AAiBA,OAAO,MAAMK,cAAc,GAAGF,UAAU,CAACW,OAAlC;AACP,eAAeX,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk, nanoid } from '@reduxjs/toolkit'\n\nconst initialState = {\n    rooms: [\n        { id: \"1\", name: \"IT\", messages: [{ id: nanoid(), text: \"hey sup\" }]},\n        { id: \"2\", name: \"Politics\", messages: [{ id: nanoid(), text: \"hello\" }]},\n        { id: \"3\", name: \"Football\", messages: [{ id: nanoid(), text: \"hii\" }]}\n    ],\n    status: 'idle',\n    error: null\n}\n\nconst roomsSlice = createSlice({\n    name: 'rooms',\n    initialState,\n    reducers: {\n        newChatMessage: (state, action) => {\n            const { roomId, text } = action.payload\n            const currentRoom = state.rooms.find(room => room.id === roomId)\n            if (currentRoom) {\n                currentRoom.messages.push({\n                    id: nanoid(),\n                    text: text\n                })\n            }\n        },\n    }\n})\n\nexport const newChatMessage = roomsSlice.actions\nexport default roomsSlice.reducer"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/chiks/socketProject/chat-room/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { io } from 'socket.io-client';\nimport { RoomHeader } from './features/rooms/RoomHeader';\nimport { RoomsList } from './features/rooms/RoomsList';\nimport { RoomFooter } from './features/rooms/RoomFooter';\nimport { ChatHeader } from './features/chats/ChatHeader';\nimport { ChatMessages } from './features/chats/ChatMessages';\nimport { ChatInput } from './features/chats/ChatInput';\nimport { newChatMessage } from './features/rooms/roomsSlice'; //import logo from './logo.svg';\n//import { Counter } from './features/counter/Counter';\n\nimport './App.css';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst endpoint = 'http://localhost:3001';\n\nconst App = () => {\n  _s();\n\n  const [clicked, setClicked] = useState(false);\n  const [roomId, setRoomId] = useState(''); // const [message, setMessage] = useState('');\n\n  const rooms = useSelector(state => state.rooms.rooms);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    socket = io(endpoint);\n    socket.on('chat message', function (data) {\n      if (data.socketId !== socket.id) {\n        dispatch(newChatMessage({\n          roomId: data.roomId,\n          text: data.text,\n          messageId: nanoid()\n        }));\n      } //alert(socket.id);\n\n    });\n  }, [dispatch, roomId]);\n\n  const handleClick = (e, roomId) => {\n    setClicked(true);\n    setRoomId(roomId);\n  };\n\n  const emitMessage = (text, roomId) => {\n    if (text) {\n      alert(socket.id);\n      socket.emit('chat message', {\n        text,\n        roomId\n      });\n    }\n  };\n\n  const renderedRooms = rooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-group-item\",\n    onClick: e => handleClick(e, room.id),\n    children: room.name\n  }, room.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container w-50 mt-5\",\n    children: clicked ? /*#__PURE__*/_jsxDEV(ChatDisplay, {\n      roomId: roomId,\n      emitMessage: emitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(RoomDisplay, {\n      renderedRooms: renderedRooms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"LeUCqVHNOoRDbmJz6LHWv+OcHnw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = App;\n\nfunction ChatDisplay({\n  roomId,\n  emitMessage\n}) {\n  // useEffect(() => {\n  //   socket = io(endpoint)\n  // })\n  // const emitMessage = (message) => {\n  //   socket.emit('chat message', message )\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card text-center\",\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      roomId: roomId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n      roomId: roomId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      roomId: roomId,\n      emitMessage: emitMessage //socket={socket}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = ChatDisplay;\n\nfunction RoomDisplay({\n  renderedRooms\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card text-center\",\n    children: [/*#__PURE__*/_jsxDEV(RoomHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoomsList, {\n      renderedRooms: renderedRooms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoomFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = RoomDisplay;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatDisplay\");\n$RefreshReg$(_c3, \"RoomDisplay\");","map":{"version":3,"sources":["/home/chiks/socketProject/chat-room/src/App.js"],"names":["React","useEffect","useState","useSelector","useDispatch","io","RoomHeader","RoomsList","RoomFooter","ChatHeader","ChatMessages","ChatInput","newChatMessage","nanoid","socket","endpoint","App","clicked","setClicked","roomId","setRoomId","rooms","state","dispatch","on","data","socketId","id","text","messageId","handleClick","e","emitMessage","alert","emit","renderedRooms","map","room","name","ChatDisplay","RoomDisplay"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { io } from 'socket.io-client'\r\n\r\nimport { RoomHeader } from './features/rooms/RoomHeader'\r\nimport { RoomsList } from './features/rooms/RoomsList'\r\nimport { RoomFooter } from './features/rooms/RoomFooter'\r\n\r\nimport { ChatHeader } from './features/chats/ChatHeader'\r\nimport { ChatMessages } from './features/chats/ChatMessages'\r\nimport { ChatInput } from './features/chats/ChatInput'\r\n\r\nimport { newChatMessage } from './features/rooms/roomsSlice'\r\n\r\n\r\n//import logo from './logo.svg';\r\n//import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\n\r\nlet socket;\r\nconst endpoint = 'http://localhost:3001'\r\n\r\nconst App = () => {\r\n  \r\n  const [clicked, setClicked] = useState(false);\r\n  const [roomId, setRoomId] = useState('');\r\n  // const [message, setMessage] = useState('');\r\n  const rooms = useSelector(state => state.rooms.rooms);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    socket = io(endpoint);\r\n    socket.on('chat message', function(data) {\r\n      if (data.socketId !== socket.id) {\r\n        dispatch(newChatMessage({\r\n          roomId: data.roomId,\r\n          text: data.text,\r\n          messageId: nanoid()\r\n        }));\r\n      }\r\n      //alert(socket.id);\r\n      \r\n    });\r\n   \r\n  }, [dispatch, roomId]);\r\n\r\n  const handleClick = (e, roomId) => {\r\n    setClicked(true)\r\n    setRoomId(roomId)\r\n  }\r\n\r\n  const emitMessage = (text, roomId) => {\r\n    if (text) {\r\n      alert(socket.id)\r\n      socket.emit('chat message', { text, roomId })\r\n    }\r\n  }\r\n\r\n  const renderedRooms = rooms.map(room => (\r\n    <div \r\n      className=\"list-group-item\" \r\n      key={room.id}\r\n      onClick={e => handleClick(e, room.id)}\r\n    >\r\n      {room.name}\r\n    </div>\r\n  ));\r\n  \r\n  \r\n  return (\r\n    <div className=\"container w-50 mt-5\">\r\n      { clicked ?\r\n        <ChatDisplay \r\n          roomId={roomId}\r\n          emitMessage={emitMessage}\r\n        /> :\r\n        <RoomDisplay renderedRooms={renderedRooms} />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ChatDisplay({ roomId, emitMessage }) {\r\n\r\n  // useEffect(() => {\r\n  //   socket = io(endpoint)\r\n  // })\r\n\r\n  // const emitMessage = (message) => {\r\n  //   socket.emit('chat message', message )\r\n  // }\r\n\r\n  return (\r\n    <div className=\"card text-center\">\r\n      <ChatHeader roomId={roomId} />\r\n      <ChatMessages roomId={roomId} />\r\n      <ChatInput \r\n        roomId={roomId}\r\n        emitMessage={emitMessage}\r\n        //socket={socket}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction RoomDisplay({ renderedRooms }) {\r\n  return (\r\n    <div className=\"card text-center\">\r\n      <RoomHeader />\r\n      <RoomsList renderedRooms={renderedRooms}/>\r\n      <RoomFooter />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}